Laboratorios Pr√°cticos - Sesi√≥n 4: Dise√±o Seguro de Aplicaciones .NET en Azure - Parte 1
Curso: Dise√±o Seguro de Aplicaciones (.NET en Azure)
Duraci√≥n Total: 100 minutos (5 laboratorios)
Modalidad: Instructor-led con pr√°ctica individual
Herramientas: Visual Studio Code + .NET 9 + C#
________________________________________
üõ†Ô∏è LABORATORIO 0: CONFIGURACI√ìN DEL ENTORNO DE DESARROLLO
‚è±Ô∏è Duraci√≥n: 15 minutos
üéØ Objetivo: Instalar y configurar todas las herramientas necesarias para el desarrollo
Paso 1: Instalaci√≥n de Chocolatey (5 minutos)
Chocolatey es un gestor de paquetes para Windows que facilita la instalaci√≥n de herramientas de desarrollo.
1.	Abrir PowerShell como Administrador:
2.	Click derecho en el bot√≥n de Windows ‚Üí Windows PowerShell (Admin)
3.	O presionar Win + X ‚Üí Windows PowerShell (Admin)
4.	Verificar Pol√≠tica de Ejecuci√≥n:
5.	Get-ExecutionPolicy
Si aparece "Restricted", ejecutar:
Set-ExecutionPolicy AllSigned
6.	Instalar Chocolatey:
7.	Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
8.	Verificar Instalaci√≥n:
9.	choco --version
Deber√≠an ver algo como: 2.2.2 (o versi√≥n m√°s reciente)
Paso 2: Instalaci√≥n de .NET 9 Core (3 minutos)
1.	Instalar .NET 9 SDK usando Chocolatey:
2.	choco install dotnet-9.0-sdk -y
3.	Verificar Instalaci√≥n:
4.	# Cerrar y reabrir PowerShell (como usuario normal)
5.	dotnet --version
Deber√≠an ver: 9.0.x (donde x es el n√∫mero de build)
6.	Verificar SDKs Instalados:
7.	dotnet --list-sdks
Deber√≠an ver .NET 9.0.x listado
Paso 3: Instalaci√≥n de Visual Studio Code (2 minutos)
1.	Instalar VS Code usando Chocolatey:
2.	choco install vscode -y
3.	Verificar Instalaci√≥n:
4.	code --version
Paso 4: Instalaci√≥n de Extensiones Esenciales para VS Code (5 minutos)
1.	Abrir Visual Studio Code:
2.	code
3.	Instalar Extensiones desde la Terminal de VS Code:
Presionar Ctrl + Shift + P y escribir "Terminal: Create New Terminal"
# Extensi√≥n principal para C# y .NET
code --install-extension ms-dotnettools.csharp

# IntelliSense mejorado para C#
code --install-extension ms-dotnettools.csdevkit

# Soporte para Azure
code --install-extension ms-vscode.vscode-node-azure-pack

# Herramientas para desarrollo web
code --install-extension ms-vscode.vscode-json

# Git integration mejorada
code --install-extension eamodio.gitlens

# Resaltado de sintaxis mejorado
code --install-extension ms-vscode.PowerShell

# Debugger para .NET
code --install-extension ms-dotnettools.vscode-dotnet-runtime
4.	Verificar Extensiones Instaladas:
5.	Ctrl + Shift + X (abrir panel de extensiones)
6.	Verificar que aparezcan instaladas:
7.	‚úÖ C# Dev Kit
8.	‚úÖ C# 
9.	‚úÖ Azure Account
10.	‚úÖ Azure Resources
11.	‚úÖ GitLens
12.	‚úÖ PowerShell
13.	Configurar VS Code para .NET 9:
14.	Presionar Ctrl + Shift + P
15.	Escribir: ".NET: New Project"
16.	Si aparece la opci√≥n, significa que .NET est√° correctamente integrado
‚úÖ Verificaci√≥n Final del Entorno:
Ejecutar estos comandos para verificar que todo est√° funcionando:
# Verificar Chocolatey
choco --version

# Verificar .NET 9
dotnet --version
dotnet --info

# Verificar VS Code
code --version

# Crear proyecto de prueba
mkdir test-dotnet9
cd test-dotnet9
dotnet new console
dotnet run
Resultado esperado del proyecto de prueba:
Hello, World!
üö® Troubleshooting Com√∫n:
Error: "choco no se reconoce como comando"
Soluci√≥n: Cerrar y reabrir PowerShell como administrador, o reiniciar Windows
Error: ".NET 9 no se encuentra"
Soluci√≥n: 
1. Reiniciar VS Code
2. Verificar variables de entorno PATH
3. Reinstalar: choco uninstall dotnet-9.0-sdk && choco install dotnet-9.0-sdk -y
Error: "Extensiones de C# no funcionan"
Soluci√≥n:
1. Reiniciar VS Code
2. Ctrl + Shift + P ‚Üí "Developer: Reload Window"
3. Verificar que .NET 9 SDK est√° instalado: dotnet --version
________________________________________
üìã PRERREQUISITOS Y VERIFICACI√ìN INICIAL
Actividades Previas Requeridas (Sesiones 1-3)
Antes de comenzar con estos laboratorios, verifiquen que tienen configurado lo siguiente de sesiones anteriores:
‚úÖ De Sesi√≥n 1:
‚Ä¢	Azure AD Tenant configurado con Security Defaults habilitados
‚Ä¢	Usuario administrativo creado y funcional
‚Ä¢	Grupo "gu_desarrollo_seguro_aplicacion" con todos los participantes
‚úÖ De Sesi√≥n 2:
‚Ä¢	Multi-Factor Authentication (MFA) configurado
‚Ä¢	Conditional Access b√°sico implementado
‚úÖ De Sesi√≥n 3:
‚Ä¢	Network Security Groups (NSGs) configurados
‚Ä¢	Virtual Network (VNet) b√°sica creada
üîß Verificaci√≥n R√°pida de Configuraciones Previas (5 minutos)
Si NO tienen las configuraciones previas, sigan estos pasos r√°pidos:
1.	Acceso a Azure Portal:
2.	- Naveguen a: https://portal.azure.com
3.	- Inicien sesi√≥n con sus credenciales de usuario invitado
4.	- Verificar que aparecen en el tenant correcto
5.	Verificar Grupo de Desarrollo:
6.	- Azure Active Directory ‚Üí Groups
7.	- Buscar: "gu_desarrollo_seguro_aplicacion"
8.	- Verificar que est√°n listados como miembros
9.	Configuraci√≥n B√°sica Azure AD (Si es necesario):
10.	- Azure Active Directory ‚Üí Properties
11.	- Verificar que Security Defaults est√°n habilitados
12.	- Si no est√°n habilitados, activarlos ahora
________________________________________
üß™ LABORATORIO 1: REGISTRO Y CONFIGURACI√ìN DE APLICACI√ìN EN AZURE AD
‚è±Ô∏è Duraci√≥n: 20 minutos
üéØ Objetivo: Crear y configurar una aplicaci√≥n .NET en Azure AD para autenticaci√≥n OAuth 2.0/OpenID Connect
Paso 1: Crear App Registration (8 minutos)
1.	Navegar a App Registrations:
2.	Azure Portal ‚Üí Azure Active Directory ‚Üí App registrations ‚Üí New registration
3.	Configurar Application Registration:
4.	Name: DevSeguroApp-[SuNombre]
5.	(Ejemplo: DevSeguroApp-Juan)
6.	
7.	Supported account types: 
8.	‚úÖ Accounts in this organizational directory only (Single tenant)
9.	
10.	Redirect URI: 
11.	Platform: Web
12.	URI: https://localhost:7001/signin-oidc
13.	Completar Registration:
o	Click "Register"
o	‚ö†Ô∏è IMPORTANTE: Anoten el Application (client) ID - lo necesitar√°n despu√©s
o	‚ö†Ô∏è IMPORTANTE: Anoten el Directory (tenant) ID
Paso 2: Configurar Authentication Settings (7 minutos)
1.	Navegar a Authentication:
2.	Su App Registration ‚Üí Authentication
3.	Configurar Redirect URIs:
4.	Web Redirect URIs:
5.	‚úÖ https://localhost:7001/signin-oidc
6.	‚úÖ https://localhost:7001/signout-callback-oidc
7.	
8.	Front-channel logout URL:
9.	https://localhost:7001/signout-oidc
10.	Advanced Settings:
11.	‚úÖ ID tokens (used for implicit and hybrid flows)
12.	‚ùå Access tokens (used for implicit flows) - Mantener deshabilitado
13.	
14.	Allow public client flows: No
Paso 3: Configurar API Permissions (5 minutos)
1.	Navegar a API Permissions:
2.	Su App Registration ‚Üí API permissions
3.	Verificar Permissions por Defecto:
4.	Microsoft Graph:
5.	‚úÖ User.Read (Delegated) - Ya debe estar presente
6.	Agregar Additional Permissions:
7.	Add a permission ‚Üí Microsoft Graph ‚Üí Delegated permissions
8.	
9.	Buscar y agregar:
10.	‚úÖ email
11.	‚úÖ profile
12.	‚úÖ openid (normalmente ya est√° incluido)
‚úÖ Resultado Esperado:
‚Ä¢	Aplicaci√≥n registrada en Azure AD
‚Ä¢	Client ID y Tenant ID documentados
‚Ä¢	Redirect URIs configurados para desarrollo local
‚Ä¢	Permissions configurados correctamente
________________________________________
üß™ LABORATORIO 2: DESARROLLO DE APLICACI√ìN .NET 9 CON OAUTH 2.0
‚è±Ô∏è Duraci√≥n: 25 minutos
üéØ Objetivo: Crear aplicaci√≥n .NET 9 que implementa autenticaci√≥n con Azure AD
Paso 1: Crear Proyecto .NET 9 (5 minutos)
1.	Abrir Visual Studio Code:
# Crear directorio para el proyecto
mkdir DevSeguroApp
cd DevSeguroApp
code .
2.	Crear Proyecto Web MVC con .NET 9:
# En la terminal integrada de VS Code (Ctrl + `)
dotnet new mvc -n DevSeguroWebApp --framework net9.0
cd DevSeguroWebApp
Verificar Estructura del Proyecto:
DevSeguroWebApp/
‚îú‚îÄ‚îÄ Controllers/
‚îú‚îÄ‚îÄ Views/
‚îú‚îÄ‚îÄ wwwroot/
‚îú‚îÄ‚îÄ Program.cs
‚îú‚îÄ‚îÄ DevSeguroWebApp.csproj
‚îî‚îÄ‚îÄ appsettings.json
3.	Agregar Packages Necesarios para .NET 9:
# Cliente MSAL para .NET (Microsoft Authentication Library)
dotnet add package Microsoft.Identity.Web --version 3.2.0

# Verificar packages instalados
dotnet list package
Paso 2: Configurar appsettings.json para .NET 9 (4 minutos)
Editar appsettings.json:
{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "TenantId": "[SU-TENANT-ID-AQU√ç]",
    "ClientId": "[SU-CLIENT-ID-AQU√ç]",
    "CallbackPath": "/signin-oidc",
    "SignedOutCallbackPath": "/signout-callback-oidc"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.AspNetCore.Authentication": "Information"
    }
  },
  "AllowedHosts": "*",
  "Kestrel": {
    "Endpoints": {
      "Https": {
        "Url": "https://localhost:7001"
      }
    }
  }
}
Configurar appsettings.Development.json:
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.AspNetCore.Authentication": "Debug",
      "Microsoft.Identity.Web": "Debug"
    }
  }
}
Paso 3: Configurar Program.cs para .NET 9 (8 minutos)
1.	Reemplazar Program.cs completamente: 
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.Identity.Web;
using Microsoft.IdentityModel.Logging;

var builder = WebApplication.CreateBuilder(args);

// Habilitar logging detallado de Identity Model (solo en desarrollo)
if (builder.Environment.IsDevelopment())
{
    IdentityModelEventSource.ShowPII = true;
}

// Configurar servicios
builder.Services.AddControllersWithViews();

// Configurar Microsoft Identity Web (nueva forma en .NET 9)
builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)
    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection("AzureAd"));

// Configurar autorizaci√≥n
builder.Services.AddAuthorization(options =>
{
    // Pol√≠tica por defecto: usuario debe estar autenticado
    options.FallbackPolicy = options.DefaultPolicy;
});

// Configurar Razor Pages (necesario para Microsoft.Identity.Web)
builder.Services.AddRazorPages();

var app = builder.Build();

// Configurar pipeline de la aplicaci√≥n
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // HSTS por defecto en .NET 9
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// ‚ö†Ô∏è ORDEN CR√çTICO en .NET 9
app.UseAuthentication();
app.UseAuthorization();

// Configurar rutas
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// Mapear Razor Pages (requerido por Microsoft.Identity.Web)
app.MapRazorPages();

app.Run();

Paso 4: Crear Client Secret en Azure AD (3 minutos)
1.	Navegar a Certificates & secrets:
Su App Registration ‚Üí Certificates & secrets ‚Üí Client secrets ‚Üí New client secret
2.	Configurar Secret:
Description: DevSeguroApp-Secret
Expires: 6 months
3.	Guardar Secret y Actualizar appsettings.json:
‚ö†Ô∏è CR√çTICO: Copien el VALUE del secret INMEDIATAMENTE

Agregar a appsettings.json en la secci√≥n AzureAd:
"ClientSecret": "[SU-CLIENT-SECRET-AQU√ç]"
Paso 5: Crear AccountController para .NET 9 (5 minutos)
Crear Controllers/AccountController.cs: 
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Identity.Web;
using System.Security.Claims;

namespace DevSeguroWebApp.Controllers
{
    [AllowAnonymous]
    public class AccountController : Controller
    {
        [HttpGet]
        public IActionResult SignIn()
        {
            var redirectUrl = Url.Action(nameof(HomeController.Index), "Home");
            return Challenge(
                new AuthenticationProperties { RedirectUri = redirectUrl },
                OpenIdConnectDefaults.AuthenticationScheme);
        }

        [HttpGet]
        public IActionResult SignOut()
        {
            return SignOut(
                new AuthenticationProperties 
                { 
                    RedirectUri = Url.Action(nameof(SignedOut), "Account") 
                },
                CookieAuthenticationDefaults.AuthenticationScheme,
                OpenIdConnectDefaults.AuthenticationScheme);
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult SignedOut()
        {
            return View();
        }

        [HttpGet]
        [Authorize]
        public IActionResult Profile()
        {
            return View();
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult AccessDenied()
        {
            return View();
        }

        // M√©todo para obtener informaci√≥n de tokens (solo desarrollo)
        [HttpGet]
        [Authorize]
        public async Task<IActionResult> TokenInfo()
        {
            if (!HttpContext.RequestServices.GetRequiredService<IWebHostEnvironment>().IsDevelopment())
            {
                return BadRequest("Solo disponible en desarrollo");
            }

            var accessToken = await HttpContext.GetTokenAsync("access_token");
            var idToken = await HttpContext.GetTokenAsync("id_token");
            var refreshToken = await HttpContext.GetTokenAsync("refresh_token");

            var model = new
            {
                User = new
                {
                    Name = User.Identity?.Name,
                    IsAuthenticated = User.Identity?.IsAuthenticated,
                    AuthenticationType = User.Identity?.AuthenticationType,
                    Claims = User.Claims.Select(c => new { c.Type, c.Value }).ToList()
                },
                Tokens = new
                {
                    AccessTokenPresent = !string.IsNullOrEmpty(accessToken),
                    IdTokenPresent = !string.IsNullOrEmpty(idToken),
                    RefreshTokenPresent = !string.IsNullOrEmpty(refreshToken),
                    AccessTokenPreview = accessToken?.Substring(0, Math.Min(50, accessToken.Length ?? 0)) + "...",
                    IdTokenPreview = idToken?.Substring(0, Math.Min(50, idToken.Length ?? 0)) + "..."
                }
            };

            return Json(model);
        }

        // M√©todo para obtener ID Token completo (solo desarrollo)
        [HttpGet]
        [Authorize]
        public async Task<IActionResult> GetFullIdToken()
        {
            if (!HttpContext.RequestServices.GetRequiredService<IWebHostEnvironment>().IsDevelopment())
            {
                return BadRequest("Solo disponible en desarrollo");
            }
            
            var idToken = await HttpContext.GetTokenAsync("id_token");
            return Json(new { IdToken = idToken });
        }
    }
}
‚úÖ Resultado Esperado:
‚Ä¢	Proyecto .NET 9 creado con estructura correcta
‚Ä¢	Microsoft.Identity.Web instalado y configurado
‚Ä¢	appsettings.json configurado con datos completos de Azure AD
‚Ä¢	Program.cs configurado para .NET 9
‚Ä¢	AccountController con m√©todos de autenticaci√≥n implementados
________________________________________
üß™ LABORATORIO 3: IMPLEMENTACI√ìN DE VISTAS Y TESTING
‚è±Ô∏è Duraci√≥n: 25 minutos
üéØ Objetivo: Crear vistas para autenticaci√≥n y probar el flujo completo con .NET 9
Paso 1: Modificar Layout Principal para .NET 9 (8 minutos)
1.	Editar Views/Shared/_Layout.cshtml: 
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - DevSeguroApp (.NET 9)</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/DevSeguroWebApp.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark bg-dark border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand text-primary fw-bold" asp-area="" asp-controller="Home" asp-action="Index">
                    üîê DevSeguroApp (.NET 9)
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-light" asp-area="" asp-controller="Home" asp-action="Index">üè† Inicio</a>
                        </li>
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-area="" asp-controller="Account" asp-action="Profile">üë§ Mi Perfil</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-light" asp-area="" asp-controller="Account" asp-action="TokenInfo">üîç Info Tokens</a>
                            </li>
                        }
                    </ul>
                    <ul class="navbar-nav">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle text-success" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                                    üëã Hola, @(User.Identity.Name ?? "Usuario")
                                </a>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="Profile">Mi Perfil</a></li>
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="TokenInfo">Informaci√≥n de Tokens</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="SignOut">üö™ Cerrar Sesi√≥n</a></li>
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link btn btn-primary text-white mx-2" asp-controller="Account" asp-action="SignIn">
                                    üîë Iniciar Sesi√≥n
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted bg-light">
        <div class="container text-center py-3">
            <small>
                DevSeguroApp con .NET 9 üöÄ | 
                Autenticaci√≥n: @(User.Identity?.IsAuthenticated == true ? "‚úÖ Activa" : "‚ùå Inactiva") |
                Servidor: @Environment.MachineName
            </small>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

Paso 2: Crear Vista de Perfil Avanzada (8 minutos)
1.	Crear Views/Account/Profile.cshtml: 
@{
    ViewData["Title"] = "Mi Perfil - Informaci√≥n de Usuario";
}

<div class="row">
    <div class="col-md-8">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4><i class="fas fa-user"></i> Informaci√≥n del Usuario (.NET 9)</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tbody>
                                <tr>
                                    <td><strong>üè∑Ô∏è Nombre Completo:</strong></td>
                                    <td><span class="badge bg-info">@(User.Identity?.Name ?? "No disponible")</span></td>
                                </tr>
                                <tr>
                                    <td><strong>üìß Email:</strong></td>
                                    <td><span class="badge bg-secondary">@(User.FindFirst("preferred_username")?.Value ?? User.FindFirst("email")?.Value ?? "No disponible")</span></td>
                                </tr>
                                <tr>
                                    <td><strong>üÜî ID de Usuario:</strong></td>
                                    <td><code>@(User.FindFirst("sub")?.Value ?? "No disponible")</code></td>
                                </tr>
                                <tr>
                                    <td><strong>üè¢ Tenant ID:</strong></td>
                                    <td><code>@(User.FindFirst("tid")?.Value ?? "No disponible")</code></td>
                                </tr>
                                <tr>
                                    <td><strong>üïê Autenticado en:</strong></td>
                                    <td>@(User.FindFirst("auth_time")?.Value != null ? DateTimeOffset.FromUnixTimeSeconds(long.Parse(User.FindFirst("auth_time").Value)).ToString("dd/MM/yyyy HH:mm:ss") : "No disponible")</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6><strong>üîê Estado de Autenticaci√≥n:</strong></h6>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Autenticado:</span>
                                <span class="badge @(User.Identity?.IsAuthenticated == true ? "bg-success" : "bg-danger")">
                                    @(User.Identity?.IsAuthenticated == true ? "‚úÖ S√≠" : "‚ùå No")
                                </span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Tipo de Autenticaci√≥n:</span>
                                <span class="badge bg-primary">@(User.Identity?.AuthenticationType ?? "No disponible")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>M√©todo de Autenticaci√≥n:</span>
                                <span class="badge bg-info">@(User.FindFirst("amr")?.Value ?? "No disponible")</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between">
                                <span>Framework:</span>
                                <span class="badge bg-warning text-dark">.NET 9</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mt-4 shadow">
            <div class="card-header bg-secondary text-white">
                <h5><i class="fas fa-list"></i> Claims Recibidos de Azure AD</h5>
                <small>Total de claims: @User.Claims.Count()</small>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>Claim Type</th>
                                <th>Value</th>
                                <th>Issuer</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var claimIndex = 1;
                            }
                            @foreach (var claim in User.Claims.OrderBy(c => c.Type))
                            {
                                <tr>
                                    <td>@claimIndex</td>
                                    <td>
                                        <code class="text-primary">@claim.Type</code>
                                    </td>
                                    <td>
                                        @if (claim.Type.Contains("tid") || claim.Type.Contains("sub") || claim.Type.Contains("oid"))
                                        {
                                            <code class="text-muted">@claim.Value</code>
                                        }
                                        else
                                        {
                                            <span>@claim.Value</span>
                                        }
                                    </td>
                                    <td><small class="text-muted">@claim.Issuer</small></td>
                               </tr>
                               claimIndex++;
                           }
                       </tbody>
                   </table>
               </div>
           </div>
       </div>
   </div>
   
   <div class="col-md-4">
       <div class="card shadow">
           <div class="card-header bg-success text-white">
               <h5><i class="fas fa-shield-alt"></i> Informaci√≥n de Seguridad</h5>
           </div>
           <div class="card-body">
               <div class="d-grid gap-2">
                   <a href="@Url.Action("TokenInfo", "Account")" class="btn btn-outline-primary">
                       üîç Ver Informaci√≥n de Tokens
                   </a>
                   <a href="@Url.Action("SignOut", "Account")" class="btn btn-outline-danger">
                       üö™ Cerrar Sesi√≥n Segura
                   </a>
               </div>
               
               <hr />
               
               <h6>üìä Estad√≠sticas de Sesi√≥n:</h6>
               <ul class="list-unstyled">
                   <li><strong>Claims disponibles:</strong> @User.Claims.Count()</li>
                   <li><strong>Roles asignados:</strong> @User.Claims.Count(c => c.Type.Contains("role"))</li>
                   <li><strong>Grupos:</strong> @User.Claims.Count(c => c.Type.Contains("group"))</li>
               </ul>
           </div>
       </div>

       <div class="card mt-3 shadow">
           <div class="card-header bg-info text-white">
               <h6><i class="fas fa-info-circle"></i> Informaci√≥n T√©cnica</h6>
           </div>
           <div class="card-body">
               <small>
                   <strong>Servidor:</strong> @Environment.MachineName<br/>
                   <strong>Framework:</strong> .NET @Environment.Version<br/>
                   <strong>OS:</strong> @Environment.OSVersion<br/>
                   <strong>Hora del servidor:</strong> @DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")
               </small>
           </div>
       </div>
   </div>
</div> 
@section Scripts { <script> // Agregar funcionalidad para copiar claims document.addEventListener('DOMContentLoaded', function() { const table = document.querySelector('table'); if (table) { table.addEventListener('click', function(e) { if (e.target.tagName === 'CODE') { navigator.clipboard.writeText(e.target.textContent); e.target.style.backgroundColor = '#28a745'; setTimeout(() => { e.target.style.backgroundColor = ''; }, 1000); } }); } }); </script> }

2. **Crear Views/Account/SignedOut.cshtml:**
```html
@{
    ViewData["Title"] = "Sesi√≥n Cerrada";
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-lg">
            <div class="card-body text-center py-5">
                <div class="mb-4">
                    <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                </div>
                <h3 class="card-title text-success">Sesi√≥n Cerrada Exitosamente</h3>
                <p class="card-text text-muted">
                    Su sesi√≥n ha sido cerrada de forma segura en Azure AD y en la aplicaci√≥n.
                    <br/>
                    <small>Powered by .NET 9 üöÄ</small>
                </p>
                
                <hr />
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                    <a asp-controller="Home" asp-action="Index" class="btn btn-primary btn-lg">
                        üè† Volver al Inicio
                    </a>
                    <a asp-controller="Account" asp-action="SignIn" class="btn btn-success btn-lg">
                        üîë Iniciar Sesi√≥n Nuevamente
                    </a>
                </div>
                
                <div class="mt-4">
                    <small class="text-muted">
                        <strong>Informaci√≥n de Seguridad:</strong><br/>
                        ‚úÖ Sesi√≥n local eliminada<br/>
                        ‚úÖ Tokens invalidados<br/>
                        ‚úÖ Redirecci√≥n segura completada
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>
Paso 3: Actualizar Vista Home para mostrar estado de autenticaci√≥n (4 minutos)
1.	Editar Views/Home/Index.cshtml: 
html
@{
    ViewData["Title"] = "Inicio - DevSeguroApp";
}

<div class="text-center">
    <h1 class="display-4">Bienvenido a DevSeguroApp</h1>
    <p class="lead">Aplicaci√≥n segura desarrollada con <strong>.NET 9</strong> y autenticaci√≥n OAuth 2.0/OpenID Connect</p>
</div>

<div class="row mt-4">
    <div class="col-md-8">
        @if (User.Identity?.IsAuthenticated == true)
        {
            <div class="alert alert-success" role="alert">
                <h4 class="alert-heading">‚úÖ ¬°Autenticaci√≥n Exitosa!</h4>
                <p>Bienvenido <strong>@(User.Identity.Name)</strong>. Su sesi√≥n est√° activa y segura.</p>
                <hr>
                <div class="d-flex gap-2">
                    <a asp-controller="Account" asp-action="Profile" class="btn btn-primary">
                        üë§ Ver Mi Perfil Completo
                    </a>
                    <a asp-controller="Account" asp-action="TokenInfo" class="btn btn-info">
                        üîç Analizar Tokens JWT
                    </a>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h5>üìä Resumen de Su Sesi√≥n Actual</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Estado:</span>
                                    <span class="badge bg-success">Autenticado</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>M√©todo:</span>
                                    <span class="badge bg-primary">@(User.Identity.AuthenticationType)</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Claims:</span>
                                    <span class="badge bg-info">@User.Claims.Count()</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üîê Informaci√≥n de Seguridad:</h6>
                            <ul class="list-unstyled">
                                <li>‚úÖ Conexi√≥n HTTPS activa</li>
                                <li>‚úÖ Tokens JWT v√°lidos</li>
                                <li>‚úÖ Sesi√≥n encriptada</li>
                                <li>‚úÖ Azure AD verificado</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                <h4 class="alert-heading">üîí Acceso No Autenticado</h4>
                <p>Para acceder a todas las funcionalidades, debe iniciar sesi√≥n con su cuenta de Azure AD.</p>
                <hr>
                <a asp-controller="Account" asp-action="SignIn" class="btn btn-primary btn-lg">
                    üîë Iniciar Sesi√≥n con Azure AD
                </a>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h5>üõ°Ô∏è Caracter√≠sticas de Seguridad</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>OAuth 2.0 / OpenID Connect:</h6>
                            <ul>
                                <li>Authorization Code Flow</li>
                                <li>PKCE (Proof Key for Code Exchange)</li>
                                <li>Tokens JWT firmados</li>
                                <li>Refresh tokens seguros</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Tecnolog√≠as Utilizadas:</h6>
                            <ul>
                                <li>.NET 9 (√∫ltima versi√≥n)</li>
                                <li>Microsoft.Identity.Web</li>
                                <li>Azure Active Directory</li>
                                <li>Bootstrap 5</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-dark text-white">
                <h6>üöÄ Informaci√≥n del Sistema</h6>
            </div>
            <div class="card-body">
                <small>
                    <strong>Framework:</strong> .NET @Environment.Version<br/>
                    <strong>Servidor:</strong> @Environment.MachineName<br/>
                    <strong>SO:</strong> @Environment.OSVersion.Platform<br/>
                    <strong>Cultura:</strong> @System.Globalization.CultureInfo.CurrentCulture.Name<br/>
                    <strong>Zona Horaria:</strong> @TimeZoneInfo.Local.DisplayName<br/>
                    <strong>Hora del Servidor:</strong> @DateTime.Now.ToString("HH:mm:ss")
                </small>
            </div>
        </div>
        
        @if (User.Identity?.IsAuthenticated != true)
        {
            <div class="card mt-3">
                <div class="card-header bg-primary text-white">
                    <h6>üîë Proceso de Autenticaci√≥n</h6>
                </div>
                <div class="card-body">
                    <ol class="list-group list-group-numbered list-group-flush">
                        <li class="list-group-item">Click en "Iniciar Sesi√≥n"</li>
                        <li class="list-group-item">Redirecci√≥n a Azure AD</li>
                        <li class="list-group-item">Ingresar credenciales</li>
                        <li class="list-group-item">Autorizar permisos</li>
                        <li class="list-group-item">Redirecci√≥n de vuelta</li>
                        <li class="list-group-item">¬°Acceso completo!</li>
                    </ol>
                </div>
            </div>
        }
    </div>
</div>
Paso 4: Testing Completo del Flujo de Autenticaci√≥n (5 minutos)
1.	Compilar y Ejecutar la Aplicaci√≥n: 
bash
# En la terminal integrada de VS Code
dotnet build
dotnet run
2.	Verificar la Aplicaci√≥n: 
3.	‚úÖ Verificar que la aplicaci√≥n se ejecuta en: https://localhost:7001
4.	‚úÖ Si aparece advertencia de certificado, aceptar (desarrollo local)
‚úÖ Verificar que aparece la p√°gina de inicio actualizada
5.	Probar el Flujo Completo de Autenticaci√≥n: 
6.	Secuencia de Testing:
7.	
8.	1. üè† P√°gina de Inicio:
9.	   - Verificar estado "No Autenticado"
10.	   - Verificar informaci√≥n del sistema (.NET 9)
11.	   - Click en "Iniciar Sesi√≥n con Azure AD"
12.	
13.	2. üîÑ Redirecci√≥n a Azure AD:
14.	   - Verificar URL contiene login.microsoftonline.com
15.	   - Ingresar credenciales de usuario invitado
16.	   - Aceptar permisos si se solicita
17.	
18.	3. ‚Ü©Ô∏è Redirecci√≥n de Vuelta:
19.	   - Verificar regreso a https://localhost:7001
20.	   - Verificar que aparece "Hola, [nombre]" en navbar
21.	   - Verificar estado "Autenticado" en p√°gina inicio
22.	
23.	4. üë§ P√°gina de Perfil:
24.	   - Click en "Ver Mi Perfil Completo"
25.	   - Verificar informaci√≥n de usuario completa
26.	   - Verificar tabla de claims poblada
27.	   - Verificar informaci√≥n t√©cnica (.NET 9)
28.	
29.	5. üîç Informaci√≥n de Tokens:
30.	   - Click en "Analizar Tokens JWT"
31.	   - Verificar JSON con informaci√≥n de tokens
32.	   - Notar qu√© tokens est√°n disponibles
33.	
34.	6. üö™ Logout:
35.	   - Click en "Cerrar Sesi√≥n"
36.	   - Verificar redirecci√≥n a Azure AD logout
37.	   - Verificar p√°gina "Sesi√≥n Cerrada Exitosamente"
   - Verificar que estado vuelve a "No Autenticado"
‚úÖ Resultado Esperado:
‚Ä¢	Interfaz de usuario moderna y responsive con Bootstrap 5
‚Ä¢	Flujo de autenticaci√≥n funcionando perfectamente end-to-end
‚Ä¢	Informaci√≥n detallada del usuario y claims visible
‚Ä¢	Estados de autenticaci√≥n claramente diferenciados
‚Ä¢	Informaci√≥n t√©cnica de .NET 9 visible
‚Ä¢	Logout seguro funcionando correctamente
________________________________________
üß™ LABORATORIO 4: AN√ÅLISIS AVANZADO DE TOKENS JWT Y DEBUGGING
‚è±Ô∏è Duraci√≥n: 15 minutos
üéØ Objetivo: Analizar tokens JWT en profundidad y implementar debugging avanzado para .NET 9
Paso 1: Crear Vista de An√°lisis de Tokens (10 minutos)
1.	Crear Views/Account/TokenInfo.cshtml: 
html
@{
    ViewData["Title"] = "An√°lisis de Tokens JWT - .NET 9";
}

<div class="row">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4><i class="fas fa-key"></i> An√°lisis Completo de Tokens JWT (.NET 9)</h4>
                <small>Informaci√≥n detallada de tokens OAuth 2.0/OpenID Connect</small>
            </div>
            <div class="card-body">
                <div id="tokenData">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando tokens...</span>
                        </div>
                        <p class="mt-2">Obteniendo informaci√≥n de tokens...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para mostrar token completo -->
<div class="modal fade" id="tokenModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Token Completo (Solo Desarrollo)</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <strong>‚ö†Ô∏è Advertencia:</strong> Esta informaci√≥n solo est√° disponible en desarrollo. 
                    Nunca expongan tokens completos en producci√≥n.
                </div>
                <div id="fullTokenContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="copyToClipboard()">üìã Copiar Token</button>
                <a href="https://jwt.io/" target="_blank" class="btn btn-info">üîç Analizar en JWT.io</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentFullToken = '';

        // Cargar informaci√≥n de tokens al cargar la p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            loadTokenInfo();
        });

        async function loadTokenInfo() {
            try {
                const response = await fetch('@Url.Action("TokenInfo", "Account")');
                const data = await response.json();
                
                displayTokenInfo(data);
            } catch (error) {
                document.getElementById('tokenData').innerHTML = `
                    <div class="alert alert-danger">
                        <h5>Error al cargar tokens</h5>
                        <p>Error: ${error.message}</p>
                    </div>
                `;
            }
        }

        function displayTokenInfo(data) {
            const tokenDataDiv = document.getElementById('tokenData');
            
            let html = `
                <div class="row">
                    <div class="col-md-6">
                        <div class="card border-success">
                            <div class="card-header bg-success text-white">
                                <h5>üë§ Informaci√≥n del Usuario</h5>
                            </div>
                            <div class="card-body">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Nombre:</strong></td>
                                        <td>${data.user.name || 'No disponible'}</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Autenticado:</strong></td>
                                        <td><span class="badge ${data.user.isAuthenticated ? 'bg-success' : 'bg-danger'}">${data.user.isAuthenticated ? 'S√≠' : 'No'}</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Tipo de Auth:</strong></td>
                                        <td><span class="badge bg-primary">${data.user.authenticationType || 'No disponible'}</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Claims:</strong></td>
                                        <td><span class="badge bg-info">${data.user.claims.length}</span></td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card border-info">
                            <div class="card-header bg-info text-white">
                                <h5>üîë Estado de Tokens</h5>
                            </div>
                            <div class="card-body">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Access Token:</strong></td>
                                        <td><span class="badge ${data.tokens.accessTokenPresent ? 'bg-success' : 'bg-danger'}">${data.tokens.accessTokenPresent ? 'Presente' : 'Ausente'}</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>ID Token:</strong></td>
                                        <td><span class="badge ${data.tokens.idTokenPresent ? 'bg-success' : 'bg-danger'}">${data.tokens.idTokenPresent ? 'Presente' : 'Ausente'}</span></td>
                                    </tr>
                                    <tr>
                                        <td><strong>Refresh Token:</strong></td>
                                        <td><span class="badge ${data.tokens.refreshTokenPresent ? 'bg-success' : 'bg-danger'}">${data.tokens.refreshTokenPresent ? 'Presente' : 'Ausente'}</span></td>
                                    </tr>
                                </table>
                                
                                ${data.tokens.idTokenPresent ? `
                                <div class="mt-3">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="showFullToken()">
                                        üîç Ver ID Token Completo
                                    </button>
                                </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5>üìã Claims Detallados</h5>
                                <small class="text-muted">Click en cualquier valor para copiarlo al portapapeles</small>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>#</th>
                                                <th>Claim Type</th>
                                                <th>Value</th>
                                                <th>Descripci√≥n</th>
                                            </tr>
                                        </thead>
                                        <tbody>
            `;
            
            data.user.claims.forEach((claim, index) => {
                const description = getClaimDescription(claim.type);
                html += `
                    <tr>
                        <td>${index + 1}</td>
                        <td><code class="text-primary">${claim.type}</code></td>
                        <td><span class="copyable" onclick="copyToClipboard('${claim.value}')" style="cursor: pointer;" title="Click para copiar">${claim.value}</span></td>
                        <td><small class="text-muted">${description}</small></td>
                    </tr>
                `;
            });
            
            html += `
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            tokenDataDiv.innerHTML = html;
        }

        function getClaimDescription(claimType) {
            const descriptions = {
                'sub': 'Subject - Identificador √∫nico del usuario',
                'name': 'Nombre completo del usuario',
                'preferred_username': 'Nombre de usuario preferido (t√≠picamente email)',
                'email': 'Direcci√≥n de correo electr√≥nico',
                'iss': 'Issuer - Quien emiti√≥ el token',
                'aud': 'Audience - Para qui√©n est√° destinado el token',
                'exp': 'Expiration - Cu√°ndo expira el token',
                'iat': 'Issued At - Cu√°ndo fue emitido el token',
                'auth_time': 'Authentication Time - Cu√°ndo se autentic√≥ el usuario',
                'tid': 'Tenant ID - Identificador del tenant de Azure AD',
                'oid': 'Object ID - ID del objeto de usuario en Azure AD',
                'amr': 'Authentication Method Reference - C√≥mo se autentic√≥',
                'family_name': 'Apellido del usuario',
                'given_name': 'Nombre del usuario',
                'ver': 'Version - Versi√≥n del token',
                'aio': 'Azure Internal Object - Uso interno de Azure'
            };
            
            return descriptions[claimType] || 'Claim personalizado o no est√°ndar';
        }

        async function showFullToken() {
            try {
                const response = await fetch('@Url.Action("GetFullIdToken", "Account")');
                const data = await response.json();
                
                currentFullToken = data.idToken;
                
                document.getElementById('fullTokenContent').innerHTML = `
                    <div class="alert alert-info">
                        <strong>üìù Instrucciones:</strong>
                        <ol>
                            <li>Copie el token completo usando el bot√≥n "üìã Copiar Token"</li>
                            <li>Visite <a href="https://jwt.io/" target="_blank">jwt.io</a> usando el bot√≥n "üîç Analizar en JWT.io"</li>
                            <li>Pegue el token en la secci√≥n "Encoded" de jwt.io</li>
                            <li>Analice la estructura: Header, Payload, y Signature</li>
                        </ol>
                    </div>
                    <div class="card">
                        <div class="card-header">
                            <h6>üîó Token JWT Completo</h6>
                        </div>
                        <div class="card-body">
                            <textarea class="form-control" rows="10" readonly style="font-family: monospace; font-size: 12px;">${data.idToken}</textarea>
                        </div>
                    </div>
                `;
                
                new bootstrap.Modal(document.getElementById('tokenModal')).show();
            } catch (error) {
                alert('Error al obtener token completo: ' + error.message);
            }
        }

        function copyToClipboard(text) {
            if (text) {
                navigator.clipboard.writeText(text).then(function() {
                    // Mostrar feedback visual
                    const element = event.target;
                    const originalBg = element.style.backgroundColor;
                    element.style.backgroundColor = '#28a745';
                    setTimeout(() => {
                        element.style.backgroundColor = originalBg;
                    }, 1000);
                });
            } else {
                navigator.clipboard.writeText(currentFullToken).then(function() {
                    alert('Token copiado al portapapeles');
                });
            }
        }
    </script>
}
Paso 2: Testing de An√°lisis de Tokens (5 minutos)
1.	Probar la Vista de An√°lisis: 
Pasos de Testing:

1. üîë Autenticarse en la aplicaci√≥n si no est√° autenticado

2. üîç Navegar a "Info Tokens" desde el men√∫

3. üìä Verificar que carga correctamente:
   - Informaci√≥n del usuario presente
   - Estado de tokens (Access, ID, Refresh)
   - Tabla de claims poblada con descripciones

4. üîó Probar funcionalidad de copia:
   - Click en cualquier valor de claim
   - Verificar que se copia al portapapeles
   - Verificar feedback visual (cambio de color)

5. üéØ Probar vista de token completo:
   - Click en "Ver ID Token Completo"
   - Verificar que abre modal
   - Verificar que muestra token completo

6. üìã Probar copia de token completo:
   - Click en "Copiar Token"
   - Verificar que se copia al portapapeles

7. üåê Probar an√°lisis en JWT.io:
   - Click en "Analizar en JWT.io"
   - Verificar que abre jwt.io en nueva pesta√±a
   - Pegar token y analizar estructura
2.	An√°lisis en JWT.io: 
Elementos a verificar en jwt.io:

‚úÖ Header:
   - alg: RS256 (algoritmo de firma)
   - typ: JWT (tipo de token)
   - kid: key ID para verificaci√≥n

‚úÖ Payload (Claims importantes):
   - iss: https://login.microsoftonline.com/[tenant]/v2.0
   - aud: [su-client-id]
   - sub: [unique-user-identifier]
   - name: [nombre-del-usuario]
   - preferred_username: [email-del-usuario]
   - exp: [timestamp-expiracion]
   - iat: [timestamp-emision]

‚úÖ Signature:
   - Aparecer√° como "Invalid" (normal, no tenemos la clave p√∫blica)
   - Verificar que la estructura es correcta
‚úÖ Resultado Esperado:
‚Ä¢	Vista de an√°lisis de tokens funcionando completamente
‚Ä¢	Informaci√≥n detallada de usuario y tokens visible
‚Ä¢	Funcionalidad de copia al portapapeles operativa
‚Ä¢	Modal de token completo mostrando JWT completo
‚Ä¢	Integration con jwt.io funcionando
‚Ä¢	Claims con descripciones explicativas
‚Ä¢	Comprensi√≥n completa de la estructura JWT
________________________________________
üìä RESUMEN Y VERIFICACI√ìN FINAL
‚úÖ Checklist de Completaci√≥n Total
Laboratorio 0 - Configuraci√≥n de Entorno:
‚Ä¢	Chocolatey instalado y funcionando
‚Ä¢	.NET 9 SDK instalado y verificado
‚Ä¢	Visual Studio Code instalado
‚Ä¢	Extensiones de C# y Azure instaladas
‚Ä¢	Proyecto de prueba funcionando
Laboratorio 1 - Azure AD Registration:
‚Ä¢	Aplicaci√≥n registrada en Azure AD
‚Ä¢	Client ID, Tenant ID documentados
‚Ä¢	Redirect URIs configurados correctamente
‚Ä¢	API Permissions configurados
‚Ä¢	Client Secret generado
Laboratorio 2 - Desarrollo .NET 9:
‚Ä¢	Proyecto .NET 9 creado con estructura correcta
‚Ä¢	Microsoft.Identity.Web instalado
‚Ä¢	appsettings.json configurado completamente
‚Ä¢	Program.cs configurado para .NET 9
‚Ä¢	AccountController implementado
Laboratorio 3 - Vistas y Testing:
‚Ä¢	Layout actualizado con navegaci√≥n segura
‚Ä¢	Vista de perfil con informaci√≥n detallada
‚Ä¢	Vista de logout# Laboratorios Pr√°cticos - Sesi√≥n 4: Dise√±o Seguro de Aplicaciones .NET en Azure - Parte 1

